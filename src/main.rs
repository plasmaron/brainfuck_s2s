use std::io;
mod macros;
fn main() -> std::io::Result<()> {
    demos::hello_world()?;
    // demos::ascii_numbers()?;
    // demos::squares_to_10000()?;
    // demos::rot13()?;
    Ok(())
}

mod demos {
    use crate::macros;
    pub fn hello_world() -> std::io::Result<()> {
        // Prints "Hello World!"
        macros::brainfuck!(++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.);
        Ok(())
    }

    pub fn ascii_numbers() -> std::io::Result<()> {
        macros::brainfuck!(>>>>+>+++>+++>>>>>+++[
        >,+>++++[>++++<-]>[<<[-[->]]>[<]>-]<<[
        >+>+>>+>+[<<<<]<+>>[+<]<[>]>+[[>>>]>>+[<<<<]>-]+<+>>>-[
        <<+[>]>>+<<<+<+<--------[
        <<-<<+[>]>+<<-<<-[
          <<<+<-[>>]<-<-<<<-<----[
            <<<->>>>+<-[
              <<<+[>]>+<<+<-<-[
                <<+<-<+[>>]<+<<<<+<-[
                  <<-[>]>>-<<<-<-<-[
                    <<<+<-[>>]<+<<<+<+<-[
                      <<<<+[>]<-<<-[
                        <<+[>]>>-<<<<-<-[
                          >>>>>+<-<<<+<-[
                            >>+<<-[
                              <<-<-[>]>+<<-<-<-[
                                <<+<+[>]<+<+<-[
                                  >>-<-<-[
                                    <<-[>]<+<++++[<-------->-]++<[
                                      <<+[>]>>-<-<<<<-[
                                        <<-<<->>>>-[
                                          <<<<+[>]>+<<<<-[
                                            <<+<<-[>>]<+<<<<<-[
                                              >>>>-<<<-<-
        ]]]]]]]]]]]]]]]]]]]]]]>[>[[[<<<<]>+>>[>>>>>]<-]<]>>>+>>>>>>>+>]<
        ]<[-]<<<<<<<++<+++<+++[
        [>]>>>>>>++++++++[<<++++>++++++>-]<-<<[-[<+>>.<-]]<<<<[
        -[-[>+<-]>]>>>>>[.[>]]<<[<+>-]>>>[<<++[<+>--]>>-]
        <<[->+<[<++>-]]<<<[<+>-]<<<<
        ]>>+>>>--[<+>---]<.>>[[-]<<]<
        ]);
        Ok(())
    }

    pub fn panics() -> std::io::Result<()> {
        // Brings the data pointer below 0
        macros::brainfuck!(><<);
        Ok(())
    }

    pub fn squares_to_10000() -> std::io::Result<()> {
        // Prints the square numbers from 1 to 10000
        macros::brainfuck!(++++[>+++++<-]>[<+++++>-]+<+[
        >[>+>+<<-]++>>[<<+>>-]>>>[-]++>[-]+
        >>>+[[-]++++++>>>]<<<[[<++++++++<++>>-]+<.<[>----<-]<]
        <<[>>>>>[>>>[-]+++++++++<[>-<-]+++++++++>[-[<->-]+[<<<]]<[>+<-]>]<<-]<<-
        ]);
        Ok(())
    }

    pub fn rot13() -> std::io::Result<()> {
        //ROT13
        macros::brainfuck!(-,+[
    -[
        >>++++[>++++++++<-]

        <+<-[
            >+>+>-[>>>]
            <[[>+<-]>>+>]
            <<<<<-
        ]
    ]>>>[-]+
    >--[-[<->[-]]]<[
        ++++++++++++<[

            >-[>+>>]
            >[+[<+>-]>+>>]
            <<<<<-
        ]
        >>[<+>-]
        >[
            -[
                -<<[-]>>
            ]<<[<<->>-]>>
        ]<<[<<+>>-]
    ]
    <[-]
    <.[-]
    <-,+
] );
        Ok(())
    }

    pub fn test() -> std::io::Result<()>
    {
        macros::brainfuck!(
>,>+++++++++,>+++++++++++[<++++++<++++++<+>>>-]<<.>.<<-.>.>.<<.);
        Ok(())
    }
}

